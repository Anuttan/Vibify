name: Model Pipeline

on:
  workflow_dispatch:

env:
  PROJECT_ID: viberain
  REGION: us-central1
  ARTIFACT_REGISTRY: gcr.io
  REPOSITORY: viberain
  IMAGE_NAME: emotion-training
  IMAGE_TAG: latest
  DOCKERFILE_PATH: pipelines/dags/src/trainer/Dockerfile
  TRAINER_DIR: pipelines/dags/src/trainer

jobs:
  build-and-train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }} --quiet

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f ${{ env.DOCKERFILE_PATH }} ${{ env.TRAINER_DIR }}

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-cloud-aiplatform

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Train model with Vertex AI
        run: |
          python - <<EOF
          from google.cloud import aiplatform

          aiplatform.init(project='${{ env.PROJECT_ID }}', location='${{ env.REGION }}')

          job = aiplatform.CustomJob.from_container_image(
              display_name="emotion-training-job",
              container_image_uri="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}",
              machine_type="n1-standard-4",
          )

          job.run(sync=True)

          model = job.get_model()

          if model:
              model.upload(
                  display_name="emotion-model",
                  artifact_uri=job.output_uri,
                  serving_container_image_uri="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}",
              )
              print(f"Model uploaded: {model.resource_name}")
          else:
              print("No model was produced by the job.")
          EOF