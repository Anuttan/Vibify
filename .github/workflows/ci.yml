name: CI

on:
  # Triggers the workflow on push or pull request events for the main and specific branches
  push:
    branches:
      - main
      - kirti
      - jai
      - anji
    paths:
      - '**'  # triggers build steps for any change
  pull_request:
    branches:
      - main
    paths:
      - '**'  # triggers build steps for any change

jobs:
  # Build and Test job
  build:
    runs-on: ubuntu-latest # Uses the latest version of Ubuntu

    steps:
      - name: Check out code
        uses: actions/checkout@v3 # Checks out the repository code

      - name: Set up Python
        uses: actions/setup-python@v4 # Sets up Python in the environment
        with:
          python-version: "==3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  
          pip install -r requirements.txt
          pip install dvc[gs]

      - name: Run tests
        run: |
          python -m unittest tests/test_song_data_pipeline.py

      - name: Setup GCP Authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_KEY }}

      - name: Setup DVC
        run: |
          dvc init -f
          dvc remote add -d myremote gs://vibify-dvc-bucket

      - name: Download data
        run: |
          python pipelines/dags/src/song_data_pipeline.py

      - name: Check Data Anomaly
        run: |
          python pipelines/dags/src/anomaly_detection.py

      - name: Pull, Push and Commit DVC data
        run: |
          dvc pull -v

      # - name: Push DVC data
      #   run: |
      #     dvc add pipelines/dags/data/raw/song_dataset.csv
      #     dvc push

      # - name: Commit DVC changes
      #   run: |
      #     git config --local user.email "anjith16@gmail.com"
      #     git config --local user.name "anuttan"
      #     git add pipelines/dags/data/raw/song_dataset.csv.dvc .dvc/config
      #     git commit -m "Update DVC tracked data [skip ci]" || echo "No changes to commit"
      
      # Slack notifications for pipeline success or failure
      - name: Send Slack notification (build success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build succeeded!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack notification (build failure)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
